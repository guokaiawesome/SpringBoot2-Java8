说明：
匿名lambda和方法引用(::   把方法作为值来传递)
两者的共同点是都是当做方法作为参数传入某个类或者接口中
但是如果你这个方法已经定义过，那么你可以用方法引用::来传递方法
如果你这个方法没有定义过，而且可能使用次数很少，那么久用匿名lamda来传递
也就是说lambda是匿名的，方法引用不是匿名的

如果lambda的长度多于几行，或者他的行为也不是一目了然的话，
那你还是应该用方法引用来指向一个有描述性名称的方法，而不是使用匿名的lambda，
你应该以代码的清晰度为准绳

三个主要组成部分
参数列表  （参数列表中的参数类型可以省略）
箭头  ->把参数类别和lambda主体分隔开
lambda主体  

注意：lambda主体内可以使用return显式返回语句，比如：
(String s) -> {return "abc";}

lambda使用局部变量（方法体里面的变量）要慎重

函数式接口：
只定义了一个抽象方法（没有默认实现）的接口，java8的接口限制还可以拥有默认方法，
哪怕有很多默认方法，只要接口只定义了一个抽象方法，它就任就是一个函数式接口

lambda表达式运行你直接以内联的形式为函数式接口的抽象方法提供实现
并把整个表达式作为函数式接口的实例

@FunctionalInterface注解表示该接口会被设计成一个函数式接口，如果你用了该注解，
而该接口却不是函数式接口的话（比如有两个抽象方法），那么编译器会报错


还有很多其他的jdk自带的好的函数式接口，需要在工作中不断实践
Supplier/IntToBinaryOperator/BiFunction/ToIntFunction/ToIntBiFunction等
